var $jscomp={scope:{},inherits:function(a,d){function b(){}b.prototype=d.prototype;a.prototype=new b;a.prototype.constructor=a;for(var c in d)if(Object.defineProperties){var e=Object.getOwnPropertyDescriptor(d,c);e&&Object.defineProperty(a,c,e)}else a[c]=d[c]}},Blip=function(){return Genny.call(this,"blip",["stuff n that"],[{type:ParamType.Select,value:"",data:["sine","square","sawtooth","triangle"],title:"wave form",description:""},{type:ParamType.Select,value:"",data:["c major","a major","c minor",
"a minor"],title:"key",description:""},{type:ParamType.Slider,min:1,max:10,value:5,title:"notes",description:""},{type:ParamType.Slider,min:1,max:8,value:1,title:"note length",description:""},{type:ParamType.Range,min:500,max:1E4,value:0,title:"timing",description:""},{type:ParamType.Slider,min:0,max:10,value:4,title:"delay time",description:""},{type:ParamType.Slider,min:0,max:10,value:3,title:"delay feedback",description:""},{type:ParamType.Slider,min:0,max:50,value:3,title:"reverb seconds",description:""},
{type:ParamType.Slider,min:0,max:100,value:2,title:"reverb decay",description:""}])||this};$jscomp.inherits(Blip,Genny);
Blip.prototype.spawnNode=function(a,d){var b=this;console.log(d);var c=function(){if(b._state!=State.Playing)return!1;var a=.25*b._params[b._LENGTH_INDEX].value,c=b.audioCtx.createOscillator();c.type=b._params[b._WAVE_INDEX].value;c.frequency.value=b.notes[d.freq];c.connect(b.master);c.connect(b.delay);c.onended=b.spawnNode(!0,d);c.start(b.audioCtx.currentTime);c.stop(b.audioCtx.currentTime+a)};a?setTimeout(c,d.time):c()};
Blip.prototype.doStart=function(){this.blips=[];switch(this._params[1].value){case "c major":this.notes=this.getNotes(_C4,!1);break;case "a major":this.notes=this.getNotes(_A4,!1);break;case "c minor":this.notes=this.getNotes(_C4,!0);break;case "a minor":this.notes=this.getNotes(_A4,!0);break;default:this.notes=this.getNotes(_C4,!1)}for(var a=0;a<this._params[this._NOTES_INDEX].value;a++){var d=this.getIntFromRange(0,this.notes.length-1),b=this.getIntFromRange(this._params[this._TIMING_INDEX].min,
this._params[this._TIMING_INDEX].max);this.blips.push({index:a,freq:d,time:b})}this.reverb=new SimpleReverb(this.audioCtx,{seconds:this._params[7].value,decay:this._params[8].value,reverse:0});this.master=this.audioCtx.createGain();this.master.gain.value=.6;this.delay=this.audioCtx.createDelay();this.delay.delayTime.value=this._params[5].value/10;this.feedback=this.audioCtx.createGain();this.feedback.gain.value=this._params[6].value/10;this.master.connect(this.audioCtx.destination);this.reverb.connect(this.master);
this.master.connect(this.reverb.input);this.delay.connect(this.feedback);this.delay.connect(this.master);this.feedback.connect(this.delay);for(a=0;a<this._params[this._NOTES_INDEX].value;a++)this.spawnNode(0!=a,this.blips[a])};Blip.prototype.doStop=function(){};
